---
description: 
globs: 
alwaysApply: true
---
# Правила чистого кода для Unity C#

## 1. Методы
- Не более 10-15 строк
- Один уровень вложенности
- Ранний возврат (early return)
- Одна ответственность
- Имена - глаголы в PascalCase
- Параметры проверяются в начале метода

## 2. Классы
- Не более 200-300 строк
- Четкая ответственность
- Минимум зависимостей
- Приватные поля с префиксом _
- Имена - существительные в PascalCase
- Один класс в файле

## 3. Unity-специфика
- Кэшировать компоненты в Start/Awake
- Использовать события вместо прямых ссылок
- Минимизировать MonoBehaviour
- Правильно обрабатывать сериализацию
- Использовать [SerializeField] вместо public
- Группировать поля с помощью [Header]

## 4. Именование
- Методы: глаголы в PascalCase (UpdateHealth, HandleInput)
- Переменные: существительные в camelCase (playerHealth, isGamePaused)
- Константы: UPPER_CASE (MAX_HEALTH, GAME_SPEED)
- Приватные поля: _camelCase (_playerHealth, _isGamePaused)
- Интерфейсы: IPascalCase (IDamageable, IInteractable)

## 5. Обработка ошибок
- Проверять входные параметры
- Логировать ошибки
- Использовать guard clauses
- Не глотать исключения
- Возвращать null вместо пустых коллекций

## 6. Оптимизация
- Кэшировать компоненты
- Использовать ObjectPool
- Избегать FindObjectOfType в Update
- Минимизировать GC.Alloc
- Оптимизировать Update методы

## 7. Документация
- XML-комментарии для публичных API
- Комментарии только для сложной логики
- Объяснять "почему", а не "что"
- Не комментировать очевидный код

## 8. Структура проекта
- Логическое разделение на папки
- Следовать принципам SOLID
- Использовать паттерны проектирования
- Минимизировать дублирование кода

## 9. Тестирование
- Писать unit-тесты
- Использовать моки
- Тестировать граничные случаи
- Следовать AAA (Arrange-Act-Assert)

## 10. Рефакторинг
- При дублировании кода
- При нарушении SOLID
- При усложнении кода
- Маленькими шагами
- С тестами 